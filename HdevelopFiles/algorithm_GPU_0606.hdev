<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (Image, 'E:/DeVisionProject/OneCamera_0417/reference_image1.bmp')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, 0.06 * Width, 0.06 * Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('red')</l>
<c></c>
<l>median_image (Image, ImageMedian, 'square', 3, 'mirrored')</l>
<l>gen_image_const (ImageAverage, 'byte', Width, Height)</l>
<l>gen_image_const (ImageDeviation, 'byte', Width, Height)</l>
<c></c>
<l>for column := 0 to Width - 1 by 1    </l>
<l>    gen_rectangle1 (Rectangle, 0, column, 8192, column + 1)</l>
<l>    intensity (Rectangle, ImageMedian, Mean, Deviation)</l>
<c>    *标准差</c>
<l>    tuple_sqrt (Deviation, Sqrt)</l>
<l>    overpaint_region (ImageAverage, Rectangle, Mean, 'fill')</l>
<l>    overpaint_region (ImageDeviation, Rectangle, min([ 5 * Sqrt,255]), 'fill')    </l>
<l>endfor</l>
<c></c>
<c></c>
<l>read_image (Image1, 'E:/DeVisionProject/OneCamera_0417/test1_1.bmp')</l>
<c></c>
<l>count_seconds (Seconds1)</l>
<c></c>
<c></c>
<c>*测试3:GPU加速，支持GPU加速的算子Halcon19.11有82个</c>
<c>*GPU加速是先从CPU中将数据拷贝到GPU上处理，处理完成后再将数据从GPU拷贝到CPU上。从CPU到GPU再从GPU到CPU是要花费时间的。</c>
<c>*GPU加速一定会比正常的AOP运算速度快吗?不一定!结果取决于显卡的好坏.</c>
<l>query_available_compute_devices(DeviceIdentifiers)</l>
<l>DeviceHandle:=0</l>
<l>for i:=0 to |DeviceIdentifiers|-1 by 1</l>
<l>    get_compute_device_info(DeviceIdentifiers[i], 'name', Nmae)</l>
<l>    if (Nmae == 'Intel(R) HD Graphics 630')//根据GPU名称打开GPU   GeForce GTX 1050 Ti      Intel(R) HD Graphics 630</l>
<l>        open_compute_device(DeviceIdentifiers[i], DeviceHandle)</l>
<l>        break</l>
<l>    endif</l>
<l>endfor</l>
<c> </c>
<l>if(DeviceHandle#0)</l>
<l>    set_compute_device_param (DeviceHandle, 'asynchronous_execution', 'false')</l>
<l>    init_compute_device(DeviceHandle, 'median_image')</l>
<l>    *init_compute_device(DeviceHandle, 'sub_image')</l>
<l>    *init_compute_device(DeviceHandle, 'add_image')</l>
<l>    activate_compute_device(DeviceHandle)</l>
<l>endif</l>
<c></c>
<l>for turn := 1 to 100 by 1</l>
<l>    median_image (Image1, ImageMedian1, 'square', 3, 'mirrored')</l>
<c></c>
<l>    sub_image (ImageMedian1, ImageAverage, ImageSub1, 1, 0)</l>
<l>    sub_image (ImageAverage, ImageMedian1, ImageSub2, 1, 0)</l>
<l>    add_image (ImageSub1, ImageSub2, ImageResult, 0.5, 0)</l>
<l>    sub_image (ImageResult, ImageDeviation, ImageOut, 1, 0)</l>
<l>    threshold (ImageOut, Region, 1, 255)</l>
<l>    dilation_circle (Region, RegionDilation, 64)</l>
<l>    erosion_circle (RegionDilation, RegionErosion, 64)</l>
<c>    </c>
<l>    connection (RegionErosion, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 3, 65536)</l>
<l>    count_obj (SelectedRegions, Number)</l>
<c>    </c>
<c>    </c>
<l>endfor</l>
<l>count_seconds (Seconds2)</l>
<l>ResultMessage := Seconds2 - Seconds1</l>
<l>Color := 'forest green'</l>
<l>disp_message (WindowHandle, ResultMessage, 'window', 12, 12, Color, 'true')</l>
<l>deactivate_compute_device (DeviceHandle)</l>
<c></c>
<l>stop()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
