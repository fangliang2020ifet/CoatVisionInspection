<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off()</l>
<c></c>
<l>*ReadPath := 'E:/DeVisionProject/A分类样本/svm_classification/'</l>
<l>ReadPath := 'D:/瑕疵检测数据记录/2瑕疵图像记录/20210315_151345/'</l>
<c></c>
<l>read_image (Image, ReadPath + 'P0.427_X196.075_R0.150_A0.056_K0.bmp')</l>
<l>get_image_pointer1 (Image, Pointer, Type, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 2 * Width, 2 * Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* </c>
<l>*ClassNames := ['matter', 'bubble', 'convex', 'paint']</l>
<l>ClassNames := ['异物', '气泡', '凹凸', '涂布']</l>
<l>Colors := ['blue', 'yellow', 'forest green','red']</l>
<l>Nu := 0.05</l>
<l>KernelParam := 0.02</l>
<c>* </c>
<c>* Create an SVM classifier</c>
<l>*create_class_svm (14, 'rbf', KernelParam, Nu, |ClassNames|, 'one-versus-one', 'principal_components', 10, SVMHandle)</l>
<l>read_class_svm ('E:/DeVisionProject/A分类样本/svm_classification/Model.svm', SVMHandle)</l>
<c></c>
<l>list_files (ReadPath, ['files','recursive'], Files)</l>
<l>Selection := regexp_select(Files,'.*[.]bmp')</l>
<l>read_image (Image, Selection[0])</l>
<l>dev_close_window ()</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, 2 * Width, 2 * Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>for Index := 0 to |Selection| - 1 by 1</l>
<l>    read_image (Image, Selection[Index]) </l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    median_image (Image, ImageMedian, 'square', 1, 'mirrored')</l>
<c>    *计算左侧10列像素的平均值</c>
<l>    gen_rectangle1 (Rectangle, 0, 0, Height, 10)</l>
<l>    intensity (Rectangle, ImageMedian, Mean, Deviation)    </l>
<l>    threshold (Image, Region, 0, 255)</l>
<l>    gen_image_const (ImageAverage, 'byte', Width, Height)</l>
<l>    gen_image_const (ImageDeviation, 'byte', Width, Height)</l>
<c>    *计算标准差</c>
<l>    tuple_sqrt (Deviation, Sqrt)</l>
<l>    overpaint_region (ImageAverage, Region, Mean, 'fill')</l>
<l>    overpaint_region (ImageDeviation, Region, min([ 5 * Sqrt,255]), 'fill')        </l>
<c>    *得到瑕疵区域</c>
<l>    sub_image (ImageMedian, ImageAverage, ImageSub1, 1, 0)</l>
<l>    sub_image (ImageAverage, ImageMedian, ImageSub2, 1, 0)</l>
<l>    add_image (ImageSub1, ImageSub2, ImageResult, 0.5, 0)</l>
<l>    sub_image (ImageResult, ImageDeviation, ImageOut, 1, 0)</l>
<c>    *通过改变阈值修改所选区域</c>
<l>    threshold (ImageOut, RegionDft, 5, 255) </l>
<l>    region_features (RegionDft, 'area', areaValue)</l>
<l>    if(areaValue &gt; 3)</l>
<l>        dilation_circle (RegionDft, RegionDilation, 2.5)</l>
<l>        erosion_circle (RegionDilation, RegionErosion, 2.5) </l>
<l>        connection (RegionErosion, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 3, 65536)  </l>
<l>        union1 (SelectedRegions, RegionUnion) </l>
<c>        </c>
<c>        *计算特征值</c>
<l>        calculate_features (Image, RegionUnion, Features)</l>
<c>        </c>
<c>        *分类  Class = 0, 1, 2, 3</c>
<l>        classify_class_svm (SVMHandle, Features, 1, Class)        </l>
<l>    endif   </l>
<c></c>
<l>    dev_display (Image)</l>
<l>    dev_set_color (Colors[Class])</l>
<l>    dev_display (RegionUnion)</l>
<l>    disp_message (WindowHandle, 'Classified as:' + ClassNames[Class], 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    *stop ()</l>
<l>endfor</l>
<l>dev_display (Image)</l>
<c></c>
<c>* </c>
<c>* Clear the classifier from memory</c>
<l>clear_class_svm (SVMHandle)</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="add_samples_to_svm">
<interface>
<ic>
<par name="ClassNames" base_type="ctrl" dimension="0"/>
<par name="SVMHandle" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="ReadPath" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>for ClassNumber := 0 to |ClassNames| - 1 by 1</l>
<l>    list_files (ReadPath + ClassNames[ClassNumber], 'files', Files)</l>
<l>    Selection := regexp_select(Files,'.*[.]bmp')</l>
<l>    for Index := 0 to |Selection| - 1 by 1</l>
<l>        read_image (Image, Selection[Index])</l>
<l>        dev_display (Image)</l>
<c>        * 'Add Samples...', -1</c>
<l>        get_image_size (Image, Width, Height)</l>
<l>        median_image (Image, ImageMedian, 'square', 1, 'mirrored')</l>
<c>        *计算左侧10列像素的平均值</c>
<l>        gen_rectangle1 (Rectangle, 0, 0, Height, 10)</l>
<l>        intensity (Rectangle, ImageMedian, Mean, Deviation)    </l>
<l>        threshold (Image, Region, 0, 255)</l>
<l>        gen_image_const (ImageAverage, 'byte', Width, Height)</l>
<l>        gen_image_const (ImageDeviation, 'byte', Width, Height)</l>
<c>        *计算标准差</c>
<l>        tuple_sqrt (Deviation, Sqrt)</l>
<l>        overpaint_region (ImageAverage, Region, Mean, 'fill')</l>
<l>        overpaint_region (ImageDeviation, Region, min([ 5 * Sqrt,255]), 'fill')        </l>
<c>        *得到瑕疵区域</c>
<l>        sub_image (ImageMedian, ImageAverage, ImageSub1, 1, 0)</l>
<l>        sub_image (ImageAverage, ImageMedian, ImageSub2, 1, 0)</l>
<l>        add_image (ImageSub1, ImageSub2, ImageResult, 0.5, 0)</l>
<l>        sub_image (ImageResult, ImageDeviation, ImageOut, 1, 0)</l>
<c>        *通过改变阈值修改所选区域</c>
<l>        threshold (ImageOut, RegionDft, 1, 255)  </l>
<l>        dilation_circle (RegionDft, RegionDilation, 2.5)</l>
<l>        erosion_circle (RegionDilation, RegionErosion, 2.5) </l>
<l>        connection (RegionErosion, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 3, 65536)  </l>
<l>        union1 (SelectedRegions, RegionUnion)        </l>
<c>        </c>
<c>        *计算特征值</c>
<l>        calculate_features (Image, RegionUnion, Features)</l>
<l>        add_sample_class_svm (SVMHandle, Features, ClassNumber)</l>
<l>    endfor</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="add_samples_to_svm">
<parameters>
<parameter id="ClassNames"/>
<parameter id="ReadPath"/>
<parameter id="SVMHandle"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="calculate_features">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="Region" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Features" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>area_center (Region, Area, Row, Column)</l>
<l>get_grayval (Image, Row, Column, Grayval)</l>
<l>region_features (Region, 'width', WidthValue)</l>
<l>region_features (Region, 'height', HeightValue)</l>
<l>region_features (Region, 'inner_radius', InnerRadius)</l>
<l>region_features (Region, 'contlength', ContLength)</l>
<l>region_features (Region, 'holes_num', HolesNum)</l>
<l>region_features (Region, 'roundness', Roundness)</l>
<l>region_features (Region, 'bulkiness', Bulkiness)</l>
<l>intensity (Region, Image, Mean, Deviation)</l>
<l>moments_region_central_invar (Region, PSI1, PSI2, PSI3, PSI4)</l>
<c></c>
<l>Features := real([Area, Grayval, WidthValue, HeightValue, Mean, Deviation, InnerRadius, ContLength, HolesNum, Roundness, Bulkiness, PSI1, PSI2, PSI3, PSI4])</l>
<l>*Features := real([Area, InnerRadius, ContLength, HolesNum, Roundness, Bulkiness])</l>
<l>*Features := real([Area, Mean, Deviation, InnerRadius, ContLength, HolesNum, Roundness, Bulkiness])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="calculate_features">
<parameters>
<parameter id="Features"/>
<parameter id="Image">
<sem_type>image</sem_type>
</parameter>
<parameter id="Region">
<sem_type>region</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="classify_regions_with_svm">
<interface>
<ic>
<par name="SVMHandle" base_type="ctrl" dimension="0"/>
<par name="Colors" base_type="ctrl" dimension="0"/>
<par name="ClassNames" base_type="ctrl" dimension="0"/>
<par name="ReadPath" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>list_files (ReadPath, ['files','recursive'], Files)</l>
<l>Selection := regexp_select(Files,'.*[.]bmp')</l>
<l>read_image (Image, Selection[0])</l>
<l>dev_close_window ()</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, 2 * Width, 2 * Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>for Index := 0 to |Selection| - 1 by 1</l>
<l>    read_image (Image, Selection[Index]) </l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    median_image (Image, ImageMedian, 'square', 1, 'mirrored')</l>
<c>    *计算左侧10列像素的平均值</c>
<l>    gen_rectangle1 (Rectangle, 0, 0, Height, 10)</l>
<l>    intensity (Rectangle, ImageMedian, Mean, Deviation)    </l>
<l>    threshold (Image, Region, 0, 255)</l>
<l>    gen_image_const (ImageAverage, 'byte', Width, Height)</l>
<l>    gen_image_const (ImageDeviation, 'byte', Width, Height)</l>
<c>    *计算标准差</c>
<l>    tuple_sqrt (Deviation, Sqrt)</l>
<l>    overpaint_region (ImageAverage, Region, Mean, 'fill')</l>
<l>    overpaint_region (ImageDeviation, Region, min([ 5 * Sqrt,255]), 'fill')        </l>
<c>    *得到瑕疵区域</c>
<l>    sub_image (ImageMedian, ImageAverage, ImageSub1, 1, 0)</l>
<l>    sub_image (ImageAverage, ImageMedian, ImageSub2, 1, 0)</l>
<l>    add_image (ImageSub1, ImageSub2, ImageResult, 0.5, 0)</l>
<l>    sub_image (ImageResult, ImageDeviation, ImageOut, 1, 0)</l>
<c>    *通过改变阈值修改所选区域</c>
<l>    threshold (ImageOut, RegionDft, 1, 255) </l>
<l>    dilation_circle (RegionDft, RegionDilation, 2.5)</l>
<l>    erosion_circle (RegionDilation, RegionErosion, 2.5) </l>
<l>    connection (RegionErosion, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 3, 65536)  </l>
<l>    union1 (SelectedRegions, RegionUnion) </l>
<c>    </c>
<l>    calculate_features (Image, RegionUnion, Features)</l>
<l>    classify_class_svm (SVMHandle, Features, 1, Class)</l>
<l>    dev_display (Image)</l>
<l>    dev_set_color (Colors[Class])</l>
<l>    *dev_display (RegionUnion)</l>
<l>    disp_message (WindowHandle, 'Classified as:' + ClassNames[Class], 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>    stop ()</l>
<l>endfor</l>
<l>dev_display (Image)</l>
<l>return ()</l>
</body>
<docu id="classify_regions_with_svm">
<parameters>
<parameter id="ClassNames"/>
<parameter id="Colors"/>
<parameter id="ReadPath"/>
<parameter id="SVMHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
