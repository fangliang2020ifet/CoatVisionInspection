<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>read_image (Image, 'E:/DeVisionProject/样图20210310/camera1_1.bmp')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, 0.06 * Width, 0.06 * Height, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('red')</l>
<c></c>
<c></c>
<l>*median_image (Image, ImageMedian, 'square', 3, 'mirrored')</l>
<c>*自动去除边界：减去平均像素值</c>
<l>threshold (Image, Region1, 0, 255)</l>
<l>intensity (Region1, Image, MeanTotal, DeviationTotal)</l>
<c>*根据图像亮度判断光源是否开启</c>
<l>if(MeanTotal &lt; 32)    </l>
<l>    return()</l>
<l>endif</l>
<l>gen_image_const (ImageMean, 'byte', Width, Height)</l>
<l>overpaint_region (ImageMean, Region1, MeanTotal, 'fill')</l>
<l>sub_image (ImageMean, Image, ImageSub, 1, 0)</l>
<l>*abs_diff_image (ImageMean, Image, ImageSub, 1)</l>
<l>threshold (ImageSub, Region2, 1, 255)</l>
<l>region_features (Region2, 'width', Value)</l>
<l>if(Value == Width)</l>
<l>    return()</l>
<l>endif</l>
<c></c>
<l>region_features (Region2, 'column1', TopLeft)</l>
<l>*smallest_rectangle1 (Region2, Row1, Column1, Row2, Column2)</l>
<l>border := 100</l>
<c>*判断是左侧去边还是右侧</c>
<l>if( TopLeft &gt; 0)</l>
<l>    move_region (Region2, RegionMoved, 0, border)</l>
<l>else</l>
<l>    move_region (Region2, RegionMoved, 0, -border)</l>
<l>endif</l>
<c>*将区域拟合成矩形</c>
<l>smallest_rectangle1 (RegionMoved, Row11, Column11, Row21, Column21)</l>
<l>gen_rectangle1 (RectanglePart, Row11, Column11, Row21, Column21)</l>
<l>reduce_domain (Image, RectanglePart, ImageReduced)</l>
<l>crop_domain (ImageReduced, ImagePart)</l>
<l>median_image (ImagePart, ImageMedian, 'square', 3, 'mirrored')</l>
<c></c>
<c>*生成参考图像</c>
<l>get_image_size (ImagePart, WidthPart, HeightPart)</l>
<l>gen_image_const (ImageAverage, 'byte', WidthPart, HeightPart)</l>
<l>gen_image_const (ImageDeviation, 'byte', WidthPart, HeightPart)</l>
<l>for column := 0 to WidthPart - 1 by 1    </l>
<l>    gen_rectangle1 (Rectangle, 0, column, HeightPart, column + 1)</l>
<l>    intensity (Rectangle, ImageMedian, Mean, Deviation)</l>
<c>    *标准差</c>
<l>    tuple_sqrt (Deviation, Sqrt)</l>
<l>    overpaint_region (ImageAverage, Rectangle, Mean, 'fill')</l>
<l>    overpaint_region (ImageDeviation, Rectangle, min([ 5 * Sqrt,255]), 'fill')   </l>
<l>endfor</l>
<l>stop()</l>
<c></c>
<l>read_image (Image1, 'E:/DeVisionProject/样图20210310/camera1_2.bmp')</l>
<l>reduce_domain (Image1, RectanglePart, Image1Reduced)</l>
<l>crop_domain (Image1Reduced, Image1Part)</l>
<l>dev_display(Image1Part)</l>
<c></c>
<c>*测试：手动AOP优化</c>
<l>set_system ('parallelize_operators', 'true')</l>
<l>get_system ('parallelize_operators', AOP)</l>
<l>optimize_aop ('median_image', 'byte', 'no_file', ['file_mode','model','parameters'], ['nil','mlp','false'])</l>
<l>optimize_aop ('sub_image', 'byte', 'no_file', ['file_mode','model','parameters'], ['nil','mlp','false'])</l>
<l>optimize_aop ('add_image', 'byte', 'no_file', ['file_mode','model','parameters'], ['nil','mlp','false'])</l>
<l>optimize_aop ('threshold', 'byte', 'no_file', ['file_mode','model','parameters'], ['nil','mlp','false'])</l>
<c></c>
<l>count_seconds (Seconds1)</l>
<l>for turn := 1 to 30 by 1</l>
<l>    *median_image (Image1, ImageMedian1, 'square', 3, 'mirrored')</l>
<l>    sub_image (Image1Part, ImageAverage, ImageSub1, 1, 0)</l>
<l>    sub_image (ImageAverage, Image1Part, ImageSub2, 1, 0)</l>
<l>    add_image (ImageSub1, ImageSub2, ImageResult, 0.5, 0)</l>
<l>    sub_image (ImageResult, ImageDeviation, ImageOut, 1, 0)</l>
<c>    *通过阈值控制检出精度</c>
<l>    threshold (ImageOut, Region, 3, 255)</l>
<l>    dilation_circle (Region, RegionDilation, 64)</l>
<l>    erosion_circle (RegionDilation, RegionErosion, 64)</l>
<c>    </c>
<l>    connection (RegionErosion, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 3, 65536)    </l>
<l>    count_obj (SelectedRegions, Number)    </l>
<l>    *select_obj (SelectedRegions, ObjectSelected, 1)</l>
<l>    dev_display(SelectedRegions)</l>
<l>    stop()</l>
<l>endfor</l>
<l>count_seconds (Seconds2)</l>
<l>ResultMessage := Seconds2 - Seconds1</l>
<l>Color := 'forest green'</l>
<l>disp_message (WindowHandle, ResultMessage, 'window', 12, 12, Color, 'true')</l>
<c></c>
<l>stop()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
